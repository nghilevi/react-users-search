{"version":3,"sources":["utils/constants.tsx","utils/utils.tsx","components/ListSearch/ListSearch.tsx","components/UsersSearch.tsx","App.tsx","hooks/useData.tsx","reportWebVitals.ts","index.tsx"],"names":["Api","Status","LoadingStatusText","UsersSearchText","ListSearchText","lowerString","str","toString","toLowerCase","parseJSON","data","json","ListSearch","listItems","displayField","onClick","useState","filterStr","setFilterStr","onItemClick","item","className","type","onInput","e","target","value","filter","indexOf","map","key","Empty","UsersSearch","postsData","usersData","userId","setUserId","posts","setPosts","SelectedUserId","NoSelection","filteredPosts","itemsList","filteredKey","filteredValue","returnList","length","Array","isArray","search","filterList","id","SelectUser","App","users","setUsers","Default","loadingStatus","setLoadingStatus","useEffect","Loading","Promise","all","Posts","Users","url","fetch","then","catch","err","Failure","Success","useData","UsersLoadFail","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c46c3e5e.chunk.js","sourcesContent":["\n\nenum Api {\n    Users = 'https://jsonplaceholder.typicode.com/users',\n    Posts = 'https://jsonplaceholder.typicode.com/posts'\n}\n\nenum Status {\n    Default = 'default',\n    Loading = 'loading',\n    Success = 'success',\n    Failure = 'failure'\n}\n\nenum LoadingStatusText {\n    Loading = 'Loading data ...',\n    Failure = 'Data loaded failed. Please try again',\n    UsersLoadFail = 'Users loaded failed. Please try again'\n}\n\nenum UsersSearchText {\n    SelectedUserId = 'Selected user id:',\n    SelectUser = 'Please select user',\n    NoSelection = 'None'\n}\n\nenum ListSearchText {\n    Empty = 'There is no items on the list. This may be due to we can not load the data. Please try again later!'\n}\n\n\n\nexport { Api, Status, UsersSearchText, ListSearchText, LoadingStatusText }","\nconst filterList = (itemsList: any[], filteredKey: string, filteredValue: string) => {\n    let returnList = itemsList || []\n    if (filteredValue.length !== 0 && Array.isArray(itemsList)) {\n        returnList = itemsList.filter((item) => {\n            const itemStr = lowerString(item[filteredKey])\n            return itemStr.search(lowerString(filteredValue)) > -1\n        })\n    }\n    return returnList\n}\n\nconst lowerString = (str: any) => str.toString().toLowerCase()\n\nconst parseJSON = (data: any) => data.json()\n\nexport { filterList, parseJSON, lowerString }","import { useState } from 'react'\nimport { ListSearchText } from '../../utils/constants'\nimport { Post, User } from '../../utils/model'\nimport { lowerString } from '../../utils/utils'\nimport './ListSearch.scss'\n\ninterface ListSearchProps {\n    listItems: User[] | Post[],\n    displayField: string,\n    onClick?: Function\n}\n\nfunction ListSearch({ listItems, displayField, onClick }: ListSearchProps) {\n\n    const [filterStr, setFilterStr] = useState<string>('')\n\n    const onInput = (e: any) => {\n        setFilterStr(e.target.value)\n    }\n\n    const onItemClick = (item: any) => {\n        if (typeof onClick === 'function') {\n            onClick(item)\n        }\n    }\n\n    const renderList = () => {\n\n        if (!listItems) {\n            return <>{ListSearchText.Empty}</>\n        } else {\n            return <>\n                <input data-testid='input' type=\"text\" onInput={(e) => onInput(e)} />\n                <ul className=\"items-list\">\n                    {\n\n                        listItems\n                            .filter((item) => lowerString(item[displayField]).indexOf(lowerString(filterStr)) > -1)\n                            .map((item, key: number) =>\n                                <li data-testid={key} key={key} onClick={(e) => { onItemClick(item) }}>\n                                    {item[displayField]}\n                                </li>\n                            )\n                    }\n                </ul>\n            </>\n        }\n    }\n\n    return (\n        <div className=\"list-search\">\n            {renderList()}\n        </div>\n    );\n}\n\nexport default ListSearch;\n","import { useState } from 'react';\nimport { filterList } from '../utils/utils';\nimport './UsersSearch.scss'\nimport ListSearch from './ListSearch/ListSearch';\nimport { UsersSearchText } from '../utils/constants';\nimport { Post, User } from '../utils/model';\n\ninterface UsersSearchProps {\n  postsData: Post[], usersData: User[]\n}\n\nfunction UsersSearch({ postsData, usersData }: UsersSearchProps) {\n\n  const [userId, setUserId] = useState<number>(-1)\n  const [posts, setPosts] = useState<Post[]>(postsData)\n\n  const onUserClicked = (item: any) => {\n    const filteredPosts = filterList(postsData, 'userId', item.id)\n    setUserId(item.id)\n    if (postsData) {\n      setPosts(filteredPosts)\n    }\n  }\n\n  return (\n    <>\n      <h1 className=\"app-header\">{UsersSearchText.SelectedUserId} {userId >= 1 ? userId : UsersSearchText.NoSelection}</h1>\n      <ListSearch\n        listItems={usersData}\n        displayField='name'\n        onClick={onUserClicked}\n      />\n      {userId >= 1 ?\n        <ListSearch\n          listItems={posts}\n          displayField='title'\n        /> :\n        <div className=\"text-container\">\n          <span className=\"default-text\">{UsersSearchText.SelectUser}</span>\n        </div>\n      }\n    </>\n  );\n}\n\nexport default UsersSearch;\n","\n\nimport { useData } from './hooks/useData';\nimport { LoadingStatusText, Status } from './utils/constants';\nimport UsersSearch from './components/UsersSearch';\n\nfunction App() {\n\n  const { posts, users, loadingStatus } = useData()\n\n  const renderApp = () => {\n    if(loadingStatus === Status.Loading){\n      return <>{LoadingStatusText.Loading}</>\n    }else if(loadingStatus === Status.Failure){\n      return <>{LoadingStatusText.Failure}</>\n    }else{\n      if(users) {\n        return <UsersSearch postsData={posts} usersData={users} />\n      }else{\n        return <>{LoadingStatusText.UsersLoadFail}</>\n      }\n    }\n  }\n\n  return (\n    <div className=\"app\">\n      <div>{renderApp()}</div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from \"react\"\nimport { Api, Status } from \"../utils/constants\"\nimport { Post, User } from \"../utils/model\"\nimport { parseJSON } from \"../utils/utils\"\n\nexport const useData = () => {\n\n    const [posts, setPosts] = useState<Post[]>([])\n    const [users, setUsers] = useState<User[]>([])\n    const [loadingStatus, setLoadingStatus] = useState(Status.Default)\n\n    useEffect(() => {\n        setLoadingStatus(Status.Loading)\n        Promise.all([Api.Posts, Api.Users].map(url =>\n            fetch(url)\n                .then(parseJSON)\n                .catch((err) => setLoadingStatus(Status.Failure))\n        ))\n        .then(data => {\n            setPosts(data[0])\n            setUsers(data[1])\n            setLoadingStatus(Status.Success)\n        })\n        .catch((err) => setLoadingStatus(Status.Failure))\n    }, [])\n\n    return { posts, users, loadingStatus }\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}